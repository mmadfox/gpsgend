// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mmadfox/projects/gpsio/gpsgend/internal/device/query.go

// Package mock_device is a generated GoMock package.
package mock_device

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	device "github.com/mmadfox/gpsgend/internal/device"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockQuery) Search(ctx context.Context, f device.QueryFilter) (device.SearchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, f)
	ret0, _ := ret[0].(device.SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockQueryMockRecorder) Search(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockQuery)(nil).Search), ctx, f)
}
