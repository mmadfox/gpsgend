// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mmadfox/projects/gpsio/gpsgend/internal/device/usecase.go

// Package mock_device is a generated GoMock package.
package mock_device

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	navigator "github.com/mmadfox/go-gpsgen/navigator"
	device "github.com/mmadfox/gpsgend/internal/device"
	types "github.com/mmadfox/gpsgend/internal/types"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddRoutes mocks base method.
func (m *MockUseCase) AddRoutes(ctx context.Context, deviceID uuid.UUID, routes []*navigator.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoutes", ctx, deviceID, routes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoutes indicates an expected call of AddRoutes.
func (mr *MockUseCaseMockRecorder) AddRoutes(ctx, deviceID, routes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoutes", reflect.TypeOf((*MockUseCase)(nil).AddRoutes), ctx, deviceID, routes)
}

// AddSensor mocks base method.
func (m *MockUseCase) AddSensor(ctx context.Context, deviceID uuid.UUID, p device.AddSensorParams) ([]types.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSensor", ctx, deviceID, p)
	ret0, _ := ret[0].([]types.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSensor indicates an expected call of AddSensor.
func (mr *MockUseCaseMockRecorder) AddSensor(ctx, deviceID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSensor", reflect.TypeOf((*MockUseCase)(nil).AddSensor), ctx, deviceID, p)
}

// NewDevice mocks base method.
func (m *MockUseCase) NewDevice(ctx context.Context, p device.NewDeviceParams) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDevice", ctx, p)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDevice indicates an expected call of NewDevice.
func (mr *MockUseCaseMockRecorder) NewDevice(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDevice", reflect.TypeOf((*MockUseCase)(nil).NewDevice), ctx, p)
}

// NewPresetsDevice mocks base method.
func (m *MockUseCase) NewPresetsDevice(ctx context.Context, p device.NewPresetsDeviceParams) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPresetsDevice", ctx, p)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPresetsDevice indicates an expected call of NewPresetsDevice.
func (mr *MockUseCaseMockRecorder) NewPresetsDevice(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPresetsDevice", reflect.TypeOf((*MockUseCase)(nil).NewPresetsDevice), ctx, p)
}

// PauseDevice mocks base method.
func (m *MockUseCase) PauseDevice(ctx context.Context, deviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseDevice indicates an expected call of PauseDevice.
func (mr *MockUseCaseMockRecorder) PauseDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseDevice", reflect.TypeOf((*MockUseCase)(nil).PauseDevice), ctx, deviceID)
}

// RemoveDevice mocks base method.
func (m *MockUseCase) RemoveDevice(ctx context.Context, deviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockUseCaseMockRecorder) RemoveDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockUseCase)(nil).RemoveDevice), ctx, deviceID)
}

// RemoveRoute mocks base method.
func (m *MockUseCase) RemoveRoute(ctx context.Context, deviceID, routeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoute", ctx, deviceID, routeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockUseCaseMockRecorder) RemoveRoute(ctx, deviceID, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockUseCase)(nil).RemoveRoute), ctx, deviceID, routeID)
}

// RemoveSensor mocks base method.
func (m *MockUseCase) RemoveSensor(ctx context.Context, deviceID, sensorID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSensor", ctx, deviceID, sensorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSensor indicates an expected call of RemoveSensor.
func (mr *MockUseCaseMockRecorder) RemoveSensor(ctx, deviceID, sensorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSensor", reflect.TypeOf((*MockUseCase)(nil).RemoveSensor), ctx, deviceID, sensorID)
}

// ResumeDevice mocks base method.
func (m *MockUseCase) ResumeDevice(ctx context.Context, deviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeDevice indicates an expected call of ResumeDevice.
func (mr *MockUseCaseMockRecorder) ResumeDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeDevice", reflect.TypeOf((*MockUseCase)(nil).ResumeDevice), ctx, deviceID)
}

// Routes mocks base method.
func (m *MockUseCase) Routes(ctx context.Context, deviceID uuid.UUID) ([]*device.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes", ctx, deviceID)
	ret0, _ := ret[0].([]*device.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Routes indicates an expected call of Routes.
func (mr *MockUseCaseMockRecorder) Routes(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockUseCase)(nil).Routes), ctx, deviceID)
}

// RunDevice mocks base method.
func (m *MockUseCase) RunDevice(ctx context.Context, deviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDevice indicates an expected call of RunDevice.
func (mr *MockUseCaseMockRecorder) RunDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDevice", reflect.TypeOf((*MockUseCase)(nil).RunDevice), ctx, deviceID)
}

// Sensors mocks base method.
func (m *MockUseCase) Sensors(ctx context.Context, deviceID uuid.UUID) ([]types.Sensor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sensors", ctx, deviceID)
	ret0, _ := ret[0].([]types.Sensor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sensors indicates an expected call of Sensors.
func (mr *MockUseCaseMockRecorder) Sensors(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sensors", reflect.TypeOf((*MockUseCase)(nil).Sensors), ctx, deviceID)
}

// StopDevice mocks base method.
func (m *MockUseCase) StopDevice(ctx context.Context, deviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDevice", ctx, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopDevice indicates an expected call of StopDevice.
func (mr *MockUseCaseMockRecorder) StopDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDevice", reflect.TypeOf((*MockUseCase)(nil).StopDevice), ctx, deviceID)
}

// UpdateDevice mocks base method.
func (m *MockUseCase) UpdateDevice(ctx context.Context, deviceID uuid.UUID, p device.UpdateDeviceParams) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, deviceID, p)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockUseCaseMockRecorder) UpdateDevice(ctx, deviceID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockUseCase)(nil).UpdateDevice), ctx, deviceID, p)
}
