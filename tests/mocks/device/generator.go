// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mmadfox/projects/gpsio/gpsgend/internal/device/generator.go

// Package mock_device is a generated GoMock package.
package mock_device

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	go_gpsgen "github.com/mmadfox/go-gpsgen"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockGenerator) Attach(arg0 *go_gpsgen.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Attach", arg0)
}

// Attach indicates an expected call of Attach.
func (mr *MockGeneratorMockRecorder) Attach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockGenerator)(nil).Attach), arg0)
}

// Detach mocks base method.
func (m *MockGenerator) Detach(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Detach", id)
}

// Detach indicates an expected call of Detach.
func (mr *MockGeneratorMockRecorder) Detach(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockGenerator)(nil).Detach), id)
}

// Lookup mocks base method.
func (m *MockGenerator) Lookup(deviceID uuid.UUID) (*go_gpsgen.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", deviceID)
	ret0, _ := ret[0].(*go_gpsgen.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockGeneratorMockRecorder) Lookup(deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockGenerator)(nil).Lookup), deviceID)
}
