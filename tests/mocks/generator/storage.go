// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mmadfox/projects/gpsio/gpsgend/internal/generator/storage.go

// Package mock_generator is a generated GoMock package.
package mock_generator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	generator "github.com/mmadfox/gpsgend/internal/generator"
	types "github.com/mmadfox/gpsgend/internal/types"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, trackerID types.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, trackerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, trackerID)
}

// FindTracker mocks base method.
func (m *MockStorage) FindTracker(ctx context.Context, trackerID types.ID) (*generator.Tracker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTracker", ctx, trackerID)
	ret0, _ := ret[0].(*generator.Tracker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTracker indicates an expected call of FindTracker.
func (mr *MockStorageMockRecorder) FindTracker(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTracker", reflect.TypeOf((*MockStorage)(nil).FindTracker), ctx, trackerID)
}

// Insert mocks base method.
func (m *MockStorage) Insert(ctx context.Context, t *generator.Tracker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStorageMockRecorder) Insert(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStorage)(nil).Insert), ctx, t)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, t *generator.Tracker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, t)
}
