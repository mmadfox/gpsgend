// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mmadfox/projects/gpsio/gpsgend/internal/generator/eventpublisher.go

// Package mock_generator is a generated GoMock package.
package mock_generator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_gpsgen "github.com/mmadfox/go-gpsgen"
	types "github.com/mmadfox/gpsgend/internal/types"
)

// MockEventPublisher is a mock of EventPublisher interface.
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher.
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance.
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// PublishTrackerCreated mocks base method.
func (m *MockEventPublisher) PublishTrackerCreated(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerCreated", ctx, trackerID)
}

// PublishTrackerCreated indicates an expected call of PublishTrackerCreated.
func (mr *MockEventPublisherMockRecorder) PublishTrackerCreated(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerCreated", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerCreated), ctx, trackerID)
}

// PublishTrackerNavigatorJumped mocks base method.
func (m *MockEventPublisher) PublishTrackerNavigatorJumped(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerNavigatorJumped", ctx, trackerID)
}

// PublishTrackerNavigatorJumped indicates an expected call of PublishTrackerNavigatorJumped.
func (mr *MockEventPublisherMockRecorder) PublishTrackerNavigatorJumped(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerNavigatorJumped", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerNavigatorJumped), ctx, trackerID)
}

// PublishTrackerNavigatorReseted mocks base method.
func (m *MockEventPublisher) PublishTrackerNavigatorReseted(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerNavigatorReseted", ctx, trackerID)
}

// PublishTrackerNavigatorReseted indicates an expected call of PublishTrackerNavigatorReseted.
func (mr *MockEventPublisherMockRecorder) PublishTrackerNavigatorReseted(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerNavigatorReseted", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerNavigatorReseted), ctx, trackerID)
}

// PublishTrackerRemoved mocks base method.
func (m *MockEventPublisher) PublishTrackerRemoved(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerRemoved", ctx, trackerID)
}

// PublishTrackerRemoved indicates an expected call of PublishTrackerRemoved.
func (mr *MockEventPublisherMockRecorder) PublishTrackerRemoved(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerRemoved", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerRemoved), ctx, trackerID)
}

// PublishTrackerResumed mocks base method.
func (m *MockEventPublisher) PublishTrackerResumed(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerResumed", ctx, trackerID)
}

// PublishTrackerResumed indicates an expected call of PublishTrackerResumed.
func (mr *MockEventPublisherMockRecorder) PublishTrackerResumed(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerResumed", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerResumed), ctx, trackerID)
}

// PublishTrackerRouteRemoved mocks base method.
func (m *MockEventPublisher) PublishTrackerRouteRemoved(ctx context.Context, trackerID, routeID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerRouteRemoved", ctx, trackerID, routeID)
}

// PublishTrackerRouteRemoved indicates an expected call of PublishTrackerRouteRemoved.
func (mr *MockEventPublisherMockRecorder) PublishTrackerRouteRemoved(ctx, trackerID, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerRouteRemoved", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerRouteRemoved), ctx, trackerID, routeID)
}

// PublishTrackerRoutesAdded mocks base method.
func (m *MockEventPublisher) PublishTrackerRoutesAdded(ctx context.Context, trackerID types.ID, routes []*go_gpsgen.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerRoutesAdded", ctx, trackerID, routes)
}

// PublishTrackerRoutesAdded indicates an expected call of PublishTrackerRoutesAdded.
func (mr *MockEventPublisherMockRecorder) PublishTrackerRoutesAdded(ctx, trackerID, routes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerRoutesAdded", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerRoutesAdded), ctx, trackerID, routes)
}

// PublishTrackerRoutesReseted mocks base method.
func (m *MockEventPublisher) PublishTrackerRoutesReseted(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerRoutesReseted", ctx, trackerID)
}

// PublishTrackerRoutesReseted indicates an expected call of PublishTrackerRoutesReseted.
func (mr *MockEventPublisherMockRecorder) PublishTrackerRoutesReseted(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerRoutesReseted", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerRoutesReseted), ctx, trackerID)
}

// PublishTrackerSensorAdded mocks base method.
func (m *MockEventPublisher) PublishTrackerSensorAdded(ctx context.Context, trackerID, sensorID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerSensorAdded", ctx, trackerID, sensorID)
}

// PublishTrackerSensorAdded indicates an expected call of PublishTrackerSensorAdded.
func (mr *MockEventPublisherMockRecorder) PublishTrackerSensorAdded(ctx, trackerID, sensorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerSensorAdded", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerSensorAdded), ctx, trackerID, sensorID)
}

// PublishTrackerSensorRemoved mocks base method.
func (m *MockEventPublisher) PublishTrackerSensorRemoved(ctx context.Context, trackerID, sensorID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerSensorRemoved", ctx, trackerID, sensorID)
}

// PublishTrackerSensorRemoved indicates an expected call of PublishTrackerSensorRemoved.
func (mr *MockEventPublisherMockRecorder) PublishTrackerSensorRemoved(ctx, trackerID, sensorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerSensorRemoved", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerSensorRemoved), ctx, trackerID, sensorID)
}

// PublishTrackerShutdowned mocks base method.
func (m *MockEventPublisher) PublishTrackerShutdowned(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerShutdowned", ctx, trackerID)
}

// PublishTrackerShutdowned indicates an expected call of PublishTrackerShutdowned.
func (mr *MockEventPublisherMockRecorder) PublishTrackerShutdowned(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerShutdowned", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerShutdowned), ctx, trackerID)
}

// PublishTrackerStarted mocks base method.
func (m *MockEventPublisher) PublishTrackerStarted(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerStarted", ctx, trackerID)
}

// PublishTrackerStarted indicates an expected call of PublishTrackerStarted.
func (mr *MockEventPublisherMockRecorder) PublishTrackerStarted(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerStarted", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerStarted), ctx, trackerID)
}

// PublishTrackerStopped mocks base method.
func (m *MockEventPublisher) PublishTrackerStopped(ctx context.Context, trackerID types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerStopped", ctx, trackerID)
}

// PublishTrackerStopped indicates an expected call of PublishTrackerStopped.
func (mr *MockEventPublisherMockRecorder) PublishTrackerStopped(ctx, trackerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerStopped", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerStopped), ctx, trackerID)
}

// PublishTrackerUpdated mocks base method.
func (m *MockEventPublisher) PublishTrackerUpdated(ctx context.Context, trackerUD types.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishTrackerUpdated", ctx, trackerUD)
}

// PublishTrackerUpdated indicates an expected call of PublishTrackerUpdated.
func (mr *MockEventPublisherMockRecorder) PublishTrackerUpdated(ctx, trackerUD interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrackerUpdated", reflect.TypeOf((*MockEventPublisher)(nil).PublishTrackerUpdated), ctx, trackerUD)
}
