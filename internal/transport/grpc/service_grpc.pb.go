// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: internal/transport/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackerService_Subscribe_FullMethodName      = "/grpc.TrackerService/Subscribe"
	TrackerService_Unsubscribe_FullMethodName    = "/grpc.TrackerService/Unsubscribe"
	TrackerService_GetClientsInfo_FullMethodName = "/grpc.TrackerService/GetClientsInfo"
)

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (TrackerService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	GetClientsInfo(ctx context.Context, in *GetClientsInfoRequest, opts ...grpc.CallOption) (*GetClientsInfoResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (TrackerService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackerService_ServiceDesc.Streams[0], TrackerService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackerService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type trackerServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *trackerServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackerServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, TrackerService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) GetClientsInfo(ctx context.Context, in *GetClientsInfoRequest, opts ...grpc.CallOption) (*GetClientsInfoResponse, error) {
	out := new(GetClientsInfoResponse)
	err := c.cc.Invoke(ctx, TrackerService_GetClientsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	Subscribe(*SubscribeRequest, TrackerService_SubscribeServer) error
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	GetClientsInfo(context.Context, *GetClientsInfoRequest) (*GetClientsInfoResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) Subscribe(*SubscribeRequest, TrackerService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTrackerServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedTrackerServiceServer) GetClientsInfo(context.Context, *GetClientsInfoRequest) (*GetClientsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsInfo not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServiceServer).Subscribe(m, &trackerServiceSubscribeServer{stream})
}

type TrackerService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type trackerServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *trackerServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_GetClientsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).GetClientsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_GetClientsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).GetClientsInfo(ctx, req.(*GetClientsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _TrackerService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetClientsInfo",
			Handler:    _TrackerService_GetClientsInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TrackerService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/transport/grpc/service.proto",
}

const (
	GeneratorService_NewTracker_FullMethodName      = "/grpc.GeneratorService/NewTracker"
	GeneratorService_SearchTrackers_FullMethodName  = "/grpc.GeneratorService/SearchTrackers"
	GeneratorService_RemoveTracker_FullMethodName   = "/grpc.GeneratorService/RemoveTracker"
	GeneratorService_UpdateTracker_FullMethodName   = "/grpc.GeneratorService/UpdateTracker"
	GeneratorService_FindTracker_FullMethodName     = "/grpc.GeneratorService/FindTracker"
	GeneratorService_StartTracker_FullMethodName    = "/grpc.GeneratorService/StartTracker"
	GeneratorService_StopTracker_FullMethodName     = "/grpc.GeneratorService/StopTracker"
	GeneratorService_TrackerState_FullMethodName    = "/grpc.GeneratorService/TrackerState"
	GeneratorService_AddRoutes_FullMethodName       = "/grpc.GeneratorService/AddRoutes"
	GeneratorService_RemoveRoute_FullMethodName     = "/grpc.GeneratorService/RemoveRoute"
	GeneratorService_Routes_FullMethodName          = "/grpc.GeneratorService/Routes"
	GeneratorService_RouteAt_FullMethodName         = "/grpc.GeneratorService/RouteAt"
	GeneratorService_RouteByID_FullMethodName       = "/grpc.GeneratorService/RouteByID"
	GeneratorService_ResetRoutes_FullMethodName     = "/grpc.GeneratorService/ResetRoutes"
	GeneratorService_ResetNavigator_FullMethodName  = "/grpc.GeneratorService/ResetNavigator"
	GeneratorService_ToNextRoute_FullMethodName     = "/grpc.GeneratorService/ToNextRoute"
	GeneratorService_ToPrevRoute_FullMethodName     = "/grpc.GeneratorService/ToPrevRoute"
	GeneratorService_MoveToRoute_FullMethodName     = "/grpc.GeneratorService/MoveToRoute"
	GeneratorService_MoveToRouteByID_FullMethodName = "/grpc.GeneratorService/MoveToRouteByID"
	GeneratorService_MoveToTrack_FullMethodName     = "/grpc.GeneratorService/MoveToTrack"
	GeneratorService_MoveToTrackByID_FullMethodName = "/grpc.GeneratorService/MoveToTrackByID"
	GeneratorService_MoveToSegment_FullMethodName   = "/grpc.GeneratorService/MoveToSegment"
	GeneratorService_AddSensor_FullMethodName       = "/grpc.GeneratorService/AddSensor"
	GeneratorService_RemoveSensor_FullMethodName    = "/grpc.GeneratorService/RemoveSensor"
	GeneratorService_Sensors_FullMethodName         = "/grpc.GeneratorService/Sensors"
	GeneratorService_ShutdownTracker_FullMethodName = "/grpc.GeneratorService/ShutdownTracker"
	GeneratorService_ResumeTracker_FullMethodName   = "/grpc.GeneratorService/ResumeTracker"
)

// GeneratorServiceClient is the client API for GeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratorServiceClient interface {
	NewTracker(ctx context.Context, in *NewTrackerRequest, opts ...grpc.CallOption) (*NewTrackerResponse, error)
	SearchTrackers(ctx context.Context, in *SearchTrackersRequest, opts ...grpc.CallOption) (*SearchTrackersResponse, error)
	RemoveTracker(ctx context.Context, in *RemoveTrackerRequest, opts ...grpc.CallOption) (*RemoveTrackerResponse, error)
	UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error)
	FindTracker(ctx context.Context, in *FindTrackerRequest, opts ...grpc.CallOption) (*FindTrackerResponse, error)
	StartTracker(ctx context.Context, in *StartTrackerRequest, opts ...grpc.CallOption) (*StartTrackerResponse, error)
	StopTracker(ctx context.Context, in *StopTrackerRequest, opts ...grpc.CallOption) (*StopTrackerResponse, error)
	TrackerState(ctx context.Context, in *TrackerStateRequest, opts ...grpc.CallOption) (*TrackerStateResponse, error)
	AddRoutes(ctx context.Context, in *AddRoutesRequest, opts ...grpc.CallOption) (*AddRoutesResponse, error)
	RemoveRoute(ctx context.Context, in *RemoveRouteRequest, opts ...grpc.CallOption) (*RemoveRouteResponse, error)
	Routes(ctx context.Context, in *RotuesRequest, opts ...grpc.CallOption) (*RoutesResponse, error)
	RouteAt(ctx context.Context, in *RouteAtRequest, opts ...grpc.CallOption) (*RouteAtResponse, error)
	RouteByID(ctx context.Context, in *RouteByIDRequest, opts ...grpc.CallOption) (*RouteByIDResponse, error)
	ResetRoutes(ctx context.Context, in *ResetRoutesRequest, opts ...grpc.CallOption) (*ResetRoutesResponse, error)
	ResetNavigator(ctx context.Context, in *ResetNavigatorRequest, opts ...grpc.CallOption) (*ResetNavigatorResponse, error)
	ToNextRoute(ctx context.Context, in *ToNextRouteRequest, opts ...grpc.CallOption) (*ToNextRouteResponse, error)
	ToPrevRoute(ctx context.Context, in *ToPrevRouteRequest, opts ...grpc.CallOption) (*ToPrevRouteResponse, error)
	MoveToRoute(ctx context.Context, in *MoveToRouteRequest, opts ...grpc.CallOption) (*MoveToRouteResponse, error)
	MoveToRouteByID(ctx context.Context, in *MoveToRouteByIDRequest, opts ...grpc.CallOption) (*MoveToRouteByIDResponse, error)
	MoveToTrack(ctx context.Context, in *MoveToTrackRequest, opts ...grpc.CallOption) (*MoveToTrackResponse, error)
	MoveToTrackByID(ctx context.Context, in *MoveToTrackByIDRequest, opts ...grpc.CallOption) (*MoveToTrackByIDResponse, error)
	MoveToSegment(ctx context.Context, in *MoveToSegmentRequest, opts ...grpc.CallOption) (*MoveToSegmentResponse, error)
	AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error)
	RemoveSensor(ctx context.Context, in *RemoveSensorRequest, opts ...grpc.CallOption) (*RemoveSensorResponse, error)
	Sensors(ctx context.Context, in *SensorsRequest, opts ...grpc.CallOption) (*SensorsResponse, error)
	ShutdownTracker(ctx context.Context, in *ShutdownTrackerRequest, opts ...grpc.CallOption) (*ShutdownTrackerResponse, error)
	ResumeTracker(ctx context.Context, in *ResumeTrackerRequest, opts ...grpc.CallOption) (*ResumeTrackerResponse, error)
}

type generatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorServiceClient(cc grpc.ClientConnInterface) GeneratorServiceClient {
	return &generatorServiceClient{cc}
}

func (c *generatorServiceClient) NewTracker(ctx context.Context, in *NewTrackerRequest, opts ...grpc.CallOption) (*NewTrackerResponse, error) {
	out := new(NewTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_NewTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) SearchTrackers(ctx context.Context, in *SearchTrackersRequest, opts ...grpc.CallOption) (*SearchTrackersResponse, error) {
	out := new(SearchTrackersResponse)
	err := c.cc.Invoke(ctx, GeneratorService_SearchTrackers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) RemoveTracker(ctx context.Context, in *RemoveTrackerRequest, opts ...grpc.CallOption) (*RemoveTrackerResponse, error) {
	out := new(RemoveTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_RemoveTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error) {
	out := new(UpdateTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_UpdateTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) FindTracker(ctx context.Context, in *FindTrackerRequest, opts ...grpc.CallOption) (*FindTrackerResponse, error) {
	out := new(FindTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_FindTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) StartTracker(ctx context.Context, in *StartTrackerRequest, opts ...grpc.CallOption) (*StartTrackerResponse, error) {
	out := new(StartTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_StartTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) StopTracker(ctx context.Context, in *StopTrackerRequest, opts ...grpc.CallOption) (*StopTrackerResponse, error) {
	out := new(StopTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_StopTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) TrackerState(ctx context.Context, in *TrackerStateRequest, opts ...grpc.CallOption) (*TrackerStateResponse, error) {
	out := new(TrackerStateResponse)
	err := c.cc.Invoke(ctx, GeneratorService_TrackerState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) AddRoutes(ctx context.Context, in *AddRoutesRequest, opts ...grpc.CallOption) (*AddRoutesResponse, error) {
	out := new(AddRoutesResponse)
	err := c.cc.Invoke(ctx, GeneratorService_AddRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) RemoveRoute(ctx context.Context, in *RemoveRouteRequest, opts ...grpc.CallOption) (*RemoveRouteResponse, error) {
	out := new(RemoveRouteResponse)
	err := c.cc.Invoke(ctx, GeneratorService_RemoveRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) Routes(ctx context.Context, in *RotuesRequest, opts ...grpc.CallOption) (*RoutesResponse, error) {
	out := new(RoutesResponse)
	err := c.cc.Invoke(ctx, GeneratorService_Routes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) RouteAt(ctx context.Context, in *RouteAtRequest, opts ...grpc.CallOption) (*RouteAtResponse, error) {
	out := new(RouteAtResponse)
	err := c.cc.Invoke(ctx, GeneratorService_RouteAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) RouteByID(ctx context.Context, in *RouteByIDRequest, opts ...grpc.CallOption) (*RouteByIDResponse, error) {
	out := new(RouteByIDResponse)
	err := c.cc.Invoke(ctx, GeneratorService_RouteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ResetRoutes(ctx context.Context, in *ResetRoutesRequest, opts ...grpc.CallOption) (*ResetRoutesResponse, error) {
	out := new(ResetRoutesResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ResetRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ResetNavigator(ctx context.Context, in *ResetNavigatorRequest, opts ...grpc.CallOption) (*ResetNavigatorResponse, error) {
	out := new(ResetNavigatorResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ResetNavigator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ToNextRoute(ctx context.Context, in *ToNextRouteRequest, opts ...grpc.CallOption) (*ToNextRouteResponse, error) {
	out := new(ToNextRouteResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ToNextRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ToPrevRoute(ctx context.Context, in *ToPrevRouteRequest, opts ...grpc.CallOption) (*ToPrevRouteResponse, error) {
	out := new(ToPrevRouteResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ToPrevRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) MoveToRoute(ctx context.Context, in *MoveToRouteRequest, opts ...grpc.CallOption) (*MoveToRouteResponse, error) {
	out := new(MoveToRouteResponse)
	err := c.cc.Invoke(ctx, GeneratorService_MoveToRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) MoveToRouteByID(ctx context.Context, in *MoveToRouteByIDRequest, opts ...grpc.CallOption) (*MoveToRouteByIDResponse, error) {
	out := new(MoveToRouteByIDResponse)
	err := c.cc.Invoke(ctx, GeneratorService_MoveToRouteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) MoveToTrack(ctx context.Context, in *MoveToTrackRequest, opts ...grpc.CallOption) (*MoveToTrackResponse, error) {
	out := new(MoveToTrackResponse)
	err := c.cc.Invoke(ctx, GeneratorService_MoveToTrack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) MoveToTrackByID(ctx context.Context, in *MoveToTrackByIDRequest, opts ...grpc.CallOption) (*MoveToTrackByIDResponse, error) {
	out := new(MoveToTrackByIDResponse)
	err := c.cc.Invoke(ctx, GeneratorService_MoveToTrackByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) MoveToSegment(ctx context.Context, in *MoveToSegmentRequest, opts ...grpc.CallOption) (*MoveToSegmentResponse, error) {
	out := new(MoveToSegmentResponse)
	err := c.cc.Invoke(ctx, GeneratorService_MoveToSegment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error) {
	out := new(AddSensorResponse)
	err := c.cc.Invoke(ctx, GeneratorService_AddSensor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) RemoveSensor(ctx context.Context, in *RemoveSensorRequest, opts ...grpc.CallOption) (*RemoveSensorResponse, error) {
	out := new(RemoveSensorResponse)
	err := c.cc.Invoke(ctx, GeneratorService_RemoveSensor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) Sensors(ctx context.Context, in *SensorsRequest, opts ...grpc.CallOption) (*SensorsResponse, error) {
	out := new(SensorsResponse)
	err := c.cc.Invoke(ctx, GeneratorService_Sensors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ShutdownTracker(ctx context.Context, in *ShutdownTrackerRequest, opts ...grpc.CallOption) (*ShutdownTrackerResponse, error) {
	out := new(ShutdownTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ShutdownTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorServiceClient) ResumeTracker(ctx context.Context, in *ResumeTrackerRequest, opts ...grpc.CallOption) (*ResumeTrackerResponse, error) {
	out := new(ResumeTrackerResponse)
	err := c.cc.Invoke(ctx, GeneratorService_ResumeTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratorServiceServer is the server API for GeneratorService service.
// All implementations must embed UnimplementedGeneratorServiceServer
// for forward compatibility
type GeneratorServiceServer interface {
	NewTracker(context.Context, *NewTrackerRequest) (*NewTrackerResponse, error)
	SearchTrackers(context.Context, *SearchTrackersRequest) (*SearchTrackersResponse, error)
	RemoveTracker(context.Context, *RemoveTrackerRequest) (*RemoveTrackerResponse, error)
	UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error)
	FindTracker(context.Context, *FindTrackerRequest) (*FindTrackerResponse, error)
	StartTracker(context.Context, *StartTrackerRequest) (*StartTrackerResponse, error)
	StopTracker(context.Context, *StopTrackerRequest) (*StopTrackerResponse, error)
	TrackerState(context.Context, *TrackerStateRequest) (*TrackerStateResponse, error)
	AddRoutes(context.Context, *AddRoutesRequest) (*AddRoutesResponse, error)
	RemoveRoute(context.Context, *RemoveRouteRequest) (*RemoveRouteResponse, error)
	Routes(context.Context, *RotuesRequest) (*RoutesResponse, error)
	RouteAt(context.Context, *RouteAtRequest) (*RouteAtResponse, error)
	RouteByID(context.Context, *RouteByIDRequest) (*RouteByIDResponse, error)
	ResetRoutes(context.Context, *ResetRoutesRequest) (*ResetRoutesResponse, error)
	ResetNavigator(context.Context, *ResetNavigatorRequest) (*ResetNavigatorResponse, error)
	ToNextRoute(context.Context, *ToNextRouteRequest) (*ToNextRouteResponse, error)
	ToPrevRoute(context.Context, *ToPrevRouteRequest) (*ToPrevRouteResponse, error)
	MoveToRoute(context.Context, *MoveToRouteRequest) (*MoveToRouteResponse, error)
	MoveToRouteByID(context.Context, *MoveToRouteByIDRequest) (*MoveToRouteByIDResponse, error)
	MoveToTrack(context.Context, *MoveToTrackRequest) (*MoveToTrackResponse, error)
	MoveToTrackByID(context.Context, *MoveToTrackByIDRequest) (*MoveToTrackByIDResponse, error)
	MoveToSegment(context.Context, *MoveToSegmentRequest) (*MoveToSegmentResponse, error)
	AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error)
	RemoveSensor(context.Context, *RemoveSensorRequest) (*RemoveSensorResponse, error)
	Sensors(context.Context, *SensorsRequest) (*SensorsResponse, error)
	ShutdownTracker(context.Context, *ShutdownTrackerRequest) (*ShutdownTrackerResponse, error)
	ResumeTracker(context.Context, *ResumeTrackerRequest) (*ResumeTrackerResponse, error)
	mustEmbedUnimplementedGeneratorServiceServer()
}

// UnimplementedGeneratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratorServiceServer struct {
}

func (UnimplementedGeneratorServiceServer) NewTracker(context.Context, *NewTrackerRequest) (*NewTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) SearchTrackers(context.Context, *SearchTrackersRequest) (*SearchTrackersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrackers not implemented")
}
func (UnimplementedGeneratorServiceServer) RemoveTracker(context.Context, *RemoveTrackerRequest) (*RemoveTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) FindTracker(context.Context, *FindTrackerRequest) (*FindTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) StartTracker(context.Context, *StartTrackerRequest) (*StartTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) StopTracker(context.Context, *StopTrackerRequest) (*StopTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) TrackerState(context.Context, *TrackerStateRequest) (*TrackerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackerState not implemented")
}
func (UnimplementedGeneratorServiceServer) AddRoutes(context.Context, *AddRoutesRequest) (*AddRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutes not implemented")
}
func (UnimplementedGeneratorServiceServer) RemoveRoute(context.Context, *RemoveRouteRequest) (*RemoveRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoute not implemented")
}
func (UnimplementedGeneratorServiceServer) Routes(context.Context, *RotuesRequest) (*RoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Routes not implemented")
}
func (UnimplementedGeneratorServiceServer) RouteAt(context.Context, *RouteAtRequest) (*RouteAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteAt not implemented")
}
func (UnimplementedGeneratorServiceServer) RouteByID(context.Context, *RouteByIDRequest) (*RouteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteByID not implemented")
}
func (UnimplementedGeneratorServiceServer) ResetRoutes(context.Context, *ResetRoutesRequest) (*ResetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRoutes not implemented")
}
func (UnimplementedGeneratorServiceServer) ResetNavigator(context.Context, *ResetNavigatorRequest) (*ResetNavigatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetNavigator not implemented")
}
func (UnimplementedGeneratorServiceServer) ToNextRoute(context.Context, *ToNextRouteRequest) (*ToNextRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToNextRoute not implemented")
}
func (UnimplementedGeneratorServiceServer) ToPrevRoute(context.Context, *ToPrevRouteRequest) (*ToPrevRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToPrevRoute not implemented")
}
func (UnimplementedGeneratorServiceServer) MoveToRoute(context.Context, *MoveToRouteRequest) (*MoveToRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToRoute not implemented")
}
func (UnimplementedGeneratorServiceServer) MoveToRouteByID(context.Context, *MoveToRouteByIDRequest) (*MoveToRouteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToRouteByID not implemented")
}
func (UnimplementedGeneratorServiceServer) MoveToTrack(context.Context, *MoveToTrackRequest) (*MoveToTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToTrack not implemented")
}
func (UnimplementedGeneratorServiceServer) MoveToTrackByID(context.Context, *MoveToTrackByIDRequest) (*MoveToTrackByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToTrackByID not implemented")
}
func (UnimplementedGeneratorServiceServer) MoveToSegment(context.Context, *MoveToSegmentRequest) (*MoveToSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToSegment not implemented")
}
func (UnimplementedGeneratorServiceServer) AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSensor not implemented")
}
func (UnimplementedGeneratorServiceServer) RemoveSensor(context.Context, *RemoveSensorRequest) (*RemoveSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSensor not implemented")
}
func (UnimplementedGeneratorServiceServer) Sensors(context.Context, *SensorsRequest) (*SensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sensors not implemented")
}
func (UnimplementedGeneratorServiceServer) ShutdownTracker(context.Context, *ShutdownTrackerRequest) (*ShutdownTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) ResumeTracker(context.Context, *ResumeTrackerRequest) (*ResumeTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTracker not implemented")
}
func (UnimplementedGeneratorServiceServer) mustEmbedUnimplementedGeneratorServiceServer() {}

// UnsafeGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorServiceServer will
// result in compilation errors.
type UnsafeGeneratorServiceServer interface {
	mustEmbedUnimplementedGeneratorServiceServer()
}

func RegisterGeneratorServiceServer(s grpc.ServiceRegistrar, srv GeneratorServiceServer) {
	s.RegisterService(&GeneratorService_ServiceDesc, srv)
}

func _GeneratorService_NewTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).NewTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_NewTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).NewTracker(ctx, req.(*NewTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_SearchTrackers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrackersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).SearchTrackers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_SearchTrackers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).SearchTrackers(ctx, req.(*SearchTrackersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_RemoveTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).RemoveTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_RemoveTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).RemoveTracker(ctx, req.(*RemoveTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_UpdateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).UpdateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_UpdateTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).UpdateTracker(ctx, req.(*UpdateTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_FindTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).FindTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_FindTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).FindTracker(ctx, req.(*FindTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_StartTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).StartTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_StartTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).StartTracker(ctx, req.(*StartTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_StopTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).StopTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_StopTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).StopTracker(ctx, req.(*StopTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_TrackerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).TrackerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_TrackerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).TrackerState(ctx, req.(*TrackerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_AddRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).AddRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_AddRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).AddRoutes(ctx, req.(*AddRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_RemoveRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).RemoveRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_RemoveRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).RemoveRoute(ctx, req.(*RemoveRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_Routes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).Routes(ctx, req.(*RotuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_RouteAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).RouteAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_RouteAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).RouteAt(ctx, req.(*RouteAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_RouteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).RouteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_RouteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).RouteByID(ctx, req.(*RouteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ResetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ResetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ResetRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ResetRoutes(ctx, req.(*ResetRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ResetNavigator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetNavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ResetNavigator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ResetNavigator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ResetNavigator(ctx, req.(*ResetNavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ToNextRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToNextRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ToNextRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ToNextRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ToNextRoute(ctx, req.(*ToNextRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ToPrevRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToPrevRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ToPrevRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ToPrevRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ToPrevRoute(ctx, req.(*ToPrevRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_MoveToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).MoveToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_MoveToRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).MoveToRoute(ctx, req.(*MoveToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_MoveToRouteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToRouteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).MoveToRouteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_MoveToRouteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).MoveToRouteByID(ctx, req.(*MoveToRouteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_MoveToTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).MoveToTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_MoveToTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).MoveToTrack(ctx, req.(*MoveToTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_MoveToTrackByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToTrackByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).MoveToTrackByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_MoveToTrackByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).MoveToTrackByID(ctx, req.(*MoveToTrackByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_MoveToSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).MoveToSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_MoveToSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).MoveToSegment(ctx, req.(*MoveToSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_AddSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).AddSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_AddSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).AddSensor(ctx, req.(*AddSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_RemoveSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).RemoveSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_RemoveSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).RemoveSensor(ctx, req.(*RemoveSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_Sensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).Sensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_Sensors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).Sensors(ctx, req.(*SensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ShutdownTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ShutdownTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ShutdownTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ShutdownTracker(ctx, req.(*ShutdownTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorService_ResumeTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).ResumeTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_ResumeTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).ResumeTracker(ctx, req.(*ResumeTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneratorService_ServiceDesc is the grpc.ServiceDesc for GeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GeneratorService",
	HandlerType: (*GeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTracker",
			Handler:    _GeneratorService_NewTracker_Handler,
		},
		{
			MethodName: "SearchTrackers",
			Handler:    _GeneratorService_SearchTrackers_Handler,
		},
		{
			MethodName: "RemoveTracker",
			Handler:    _GeneratorService_RemoveTracker_Handler,
		},
		{
			MethodName: "UpdateTracker",
			Handler:    _GeneratorService_UpdateTracker_Handler,
		},
		{
			MethodName: "FindTracker",
			Handler:    _GeneratorService_FindTracker_Handler,
		},
		{
			MethodName: "StartTracker",
			Handler:    _GeneratorService_StartTracker_Handler,
		},
		{
			MethodName: "StopTracker",
			Handler:    _GeneratorService_StopTracker_Handler,
		},
		{
			MethodName: "TrackerState",
			Handler:    _GeneratorService_TrackerState_Handler,
		},
		{
			MethodName: "AddRoutes",
			Handler:    _GeneratorService_AddRoutes_Handler,
		},
		{
			MethodName: "RemoveRoute",
			Handler:    _GeneratorService_RemoveRoute_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _GeneratorService_Routes_Handler,
		},
		{
			MethodName: "RouteAt",
			Handler:    _GeneratorService_RouteAt_Handler,
		},
		{
			MethodName: "RouteByID",
			Handler:    _GeneratorService_RouteByID_Handler,
		},
		{
			MethodName: "ResetRoutes",
			Handler:    _GeneratorService_ResetRoutes_Handler,
		},
		{
			MethodName: "ResetNavigator",
			Handler:    _GeneratorService_ResetNavigator_Handler,
		},
		{
			MethodName: "ToNextRoute",
			Handler:    _GeneratorService_ToNextRoute_Handler,
		},
		{
			MethodName: "ToPrevRoute",
			Handler:    _GeneratorService_ToPrevRoute_Handler,
		},
		{
			MethodName: "MoveToRoute",
			Handler:    _GeneratorService_MoveToRoute_Handler,
		},
		{
			MethodName: "MoveToRouteByID",
			Handler:    _GeneratorService_MoveToRouteByID_Handler,
		},
		{
			MethodName: "MoveToTrack",
			Handler:    _GeneratorService_MoveToTrack_Handler,
		},
		{
			MethodName: "MoveToTrackByID",
			Handler:    _GeneratorService_MoveToTrackByID_Handler,
		},
		{
			MethodName: "MoveToSegment",
			Handler:    _GeneratorService_MoveToSegment_Handler,
		},
		{
			MethodName: "AddSensor",
			Handler:    _GeneratorService_AddSensor_Handler,
		},
		{
			MethodName: "RemoveSensor",
			Handler:    _GeneratorService_RemoveSensor_Handler,
		},
		{
			MethodName: "Sensors",
			Handler:    _GeneratorService_Sensors_Handler,
		},
		{
			MethodName: "ShutdownTracker",
			Handler:    _GeneratorService_ShutdownTracker_Handler,
		},
		{
			MethodName: "ResumeTracker",
			Handler:    _GeneratorService_ResumeTracker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/transport/grpc/service.proto",
}
