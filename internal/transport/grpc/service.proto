syntax = "proto3";

package grpc;

option go_package = "internal/transport/grpc;grpc";

import "internal/transport/grpc/types.proto";

service GeneratorService {
    rpc NewTracker(NewTrackerRequest) returns (NewTrackerRequest) {}
    rpc SearchTrackers(SearchTrackersRequest) returns (SearchTrackersResponse)  {}
    rpc RemoveTracker(RemoveTrackerRequest) returns (RemoveTrackerResponse) {}
    rpc UpdateTracker(UpdateTrackerRequest) returns (UpdateTrackerResponse) {}
    rpc FindTracker(FindTrackerRequest) returns (FindTrackerResponse) {}
    rpc StartTracker(StartTrackerRequest) returns (StartTrackerResponse) {}
    rpc StopTracker(StopTrackerRequest) returns (StopTrackerResponse) {}
    rpc TrackerState(TrackerStateRequest) returns (TrackerStateResponse) {}
    rpc AddRoutes(AddRoutesRequest) returns (AddRoutesResponse) {}
    rpc RemoveRoute(RemoveRouteRequest) returns (RemoveRouteResponse) {}
    rpc Routes(RotuesRequest) returns (RoutesResponse) {}
    rpc RouteAt(RouteAtRequest) returns (RouteAtResponse) {}
    rpc RouteByID(RouteByIDRequest) returns (RouteByIDResponse) {}
    rpc ResetRoutes(ResetRoutesRequest) returns (ResetRoutesResponse) {}
    rpc ResetNavigator(ResetNavigatorRequest) returns (ResetNavigatorResponse) {}
    rpc ToNextRoute(ToNextRouteRequest) returns (ToNextRouteResponse) {}
    rpc ToPrevRoute(ToPrevRouteRequest) returns (ToPrevRouteResponse) {}
    rpc MoveToRoute(MoveToRouteRequest) returns (MoveToRouteResponse) {}
    rpc MoveToRouteByID(MoveToRouteByIDRequest) returns (MoveToRouteByIDResponse) {}
    rpc MoveToTrack(MoveToTrackRequest) returns (MoveToTrackResponse) {}
    rpc MoveToTrackByID(MoveToTrackByIDRequest) returns (MoveToTrackByIDResponse) {}
    rpc MoveToSegment(MoveToSegmentRequest) returns (MoveToSegmentResponse) {}
    rpc AddSensor(AddSensorRequest) returns (AddSensorResponse) {}
    rpc RemoveSensor(RemoveSensorRequest) returns (RemoveSensorResponse) {}
    rpc Sensors(SensorsRequest) returns (SensorsResponse) {}
    rpc ShutdownTracker(ShutdownTrackerRequest) returns (ShutdownTrackerResponse) {}
    rpc ResumeTracker(ResumeTrackerRequest) returns (ResumeTrackerResponse) {}
}

message ResumeTrackerRequest {
    string tracker_id = 1;
}

message ResumeTrackerResponse {
    Error error = 1; 
} 

message ShutdownTrackerRequest {
   string tracker_id = 1; 
}

message ShutdownTrackerResponse {
    Error error = 1;
}

message SensorsRequest {
    string tracker_id = 1;
}

message SensorsResponse {
    repeated Sensor sensors = 1;
    Error error = 2;
}

message RemoveSensorRequest {
    string tracker_id = 1; 
    string sensor_id = 2;
}

message RemoveSensorResponse {
    Error error = 1;
}

message AddSensorRequest {
    string id = 1;
    string name = 2;
    double min = 3; 
    double max = 4;
    int64 amplitude = 5; 
    int64 mode = 6;
}

message AddSensorResponse {
    Error error = 1;
}

message MoveToSegmentRequest {
   string tracker_id = 1;
   int64 route_index = 2; 
   int64 track_index = 3; 
   int64 segment_index = 4; 
}

message MoveToSegmentResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message MoveToTrackByIDRequest {
    string tracker_id = 1;
    int64 route_index = 2;
    int64 track_id = 3;
}

message MoveToTrackByIDResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message MoveToTrackRequest{
    string tracker_id = 1;
    int64 route_index = 2;
    int64 track_index = 3;
}

message MoveToTrackResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message MoveToRouteByIDRequest {
    string tracker_id = 1;
    string route_id = 2;
}

message MoveToRouteByIDResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message MoveToRouteRequest {
    string tracker_id = 1;
    int64 route_index = 2;
}

message MoveToRouteResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message ToPrevRouteRequest {
    string tracker_id = 1;
}

message ToPrevRouteResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message ToNextRouteRequest {
    string tracker_id = 1;
}

message ToNextRouteResponse {
    Navigator navigator = 1;
    bool ok = 2;
    Error error = 3;
}

message ResetNavigatorRequest {
    string tracker_id = 1; 
}

message ResetNavigatorResponse {
    Error error = 1;
}

message ResetRoutesRequest {
   string tracker_id = 1; 
}

message ResetRoutesResponse {
    Error error = 1;
}

message RouteByIDRequest {
    string tracker_id = 1;
    string route_id = 2;
}

message RouteByIDResponse {
    bytes route = 1;
    Error error = 2;
}

message RouteAtRequest {
    string tracker_id = 1;
    int64 route_index = 2;
}

message RouteAtResponse {
    bytes route = 1; 
    Error error = 2;
}

message RotuesRequest {
    string tracker_id = 1;
}

message RoutesResponse {
    bytes routes = 1; 
    Error error = 2;
}

message RemoveRouteRequest {
    string tracker_id = 1;
    string route_id = 2;
}

message RemoveRouteResponse {
    Error error = 1;
}

message AddRoutesRequest {
   string tracker_id = 1;
   bytes routes = 2;
}

message AddRoutesResponse {
     Error error = 1;
}

message TrackerStateRequest {
    string tracker_id = 1;
}

message TrackerStateResponse {
    bytes state = 1;
    Error error = 2;
}

message StopTrackerRequest {
    string tracker_id = 1;
}

message StopTrackerResponse {
    Error error = 1;
}

message StartTrackerRequest {
    string tracker_id = 1;
}

message StartTrackerResponse {
    Error error = 1;
}

message FindTrackerRequest {
    string tracker_id = 1;
}

message FindTrackerResponse {
    Tracker tracker = 1;
    Error error = 2;
}

message UpdateTrackerRequest {
    string tracker_id = 1;
    string model = 2; 
    string color = 3; 
    string custom_id = 4; 
    string descr = 5;
}

message UpdateTrackerResponse {
    Error error = 1;
}

message RemoveTrackerRequest {
    string tracker_id = 1;
} 

message RemoveTrackerResponse {
     Error error = 1; 
}

message SearchTrackersRequest {
     Filter filter = 1;
}

message SearchTrackersResponse {
     repeated Tracker trackers = 1;
     Error error = 2;
}

message NewTrackerRequest {
    string model = 1;
    string color = 2; 
    string custom_id = 3;
    string descr = 4;
    bytes props = 5;
    bool skip_offline = 6;
    Offline offline = 7;
    Elevation elevation = 8;
    Battery battery = 9;
    Speed speed = 10;
}

message NewTrackerResponse {
    Tracker tracker = 1;
    Error error = 2;
}